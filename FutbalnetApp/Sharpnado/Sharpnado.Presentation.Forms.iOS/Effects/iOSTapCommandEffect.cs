// https://github.com/mrxten/XamEffects/blob/master/src/XamEffects.iOS/CommandsPlatform.cs
// 4502b59  on 26 Dec 2017
// @mrxten mrxten Updated for xf 2.5
// This file isn't generated, but this comment is necessary to exclude it from StyleCop analysis.
// <auto-generated/>

using System.ComponentModel;
using System.Threading.Tasks;
using System.Windows.Input;
using Foundation;
using Sharpnado.Infrastructure.Tasks;
using Sharpnado.Presentation.Forms.Effects;
using Sharpnado.Presentation.Forms.iOS.Effects;
using UIKit;
using Xamarin.Forms;
using Xamarin.Forms.Platform.iOS;

[assembly: ExportEffect(typeof(iOSTapCommandEffect), nameof(TapCommandEffect))]
namespace Sharpnado.Presentation.Forms.iOS.Effects
{
    [Preserve]
    public class iOSTapCommandEffect : PlatformEffect
    {
        private UIView _view;

        private ICommand _tapCommand;

        private ICommand _longCommand;

        private object _tapParameter;

        private object _longParameter;

        public static void Initialize()
        {
        }

        protected override void OnAttached()
        {
            _view = Control ?? Container;
            _view.UserInteractionEnabled = true;

            UpdateTap();
            UpdateTapParameter();
            UpdateLongTap();
            UpdateLongTapParameter();

            TapGestureCollector.Add(_view, TapAction);
            // LongTapGestureCollector.Add(_view, LongTapAction);
        }

        protected override void OnDetached()
        {
            TapGestureCollector.Delete(_view, TapAction);
            // LongTapGestureCollector.Delete(_view, LongTapAction);
        }

        protected override void OnElementPropertyChanged(PropertyChangedEventArgs args)
        {
            base.OnElementPropertyChanged(args);

            if (args.PropertyName == TapCommandEffect.TapProperty.PropertyName)
            {
                UpdateTap();
            }
            else if (args.PropertyName == TapCommandEffect.TapParameterProperty.PropertyName)
            {
                UpdateTapParameter();
            }
            else if (args.PropertyName == TapCommandEffect.LongTapProperty.PropertyName)
            {
                UpdateLongTap();
            }
            else if (args.PropertyName == TapCommandEffect.LongTapParameterProperty.PropertyName)
            {
                UpdateLongTapParameter();
            }
        }

        private void TapAction()
        {
            NotifyTask.Create(async () =>
            {
                await Task.Delay(50);
                _tapCommand?.Execute(_tapParameter);
            });
        }

        private void LongTapAction(UIGestureRecognizerState state)
        {
            switch (state)
            {
                case UIGestureRecognizerState.Began:
                    break;

                case UIGestureRecognizerState.Ended:
                    if (_longCommand == null)
                    {
                        TapAction();
                    }
                    else
                    {
                        NotifyTask.Create(
                            async () =>
                            {
                                await Task.Delay(50);
                                _longCommand.Execute(_longParameter);
                            });
                    }

                    break;

                case UIGestureRecognizerState.Cancelled:
                case UIGestureRecognizerState.Failed:
                    break;
            }
        }

        private void UpdateTap()
        {
            _tapCommand = TapCommandEffect.GetTap(Element);
        }

        private void UpdateTapParameter()
        {
            _tapParameter = TapCommandEffect.GetTapParameter(Element);
        }

        private void UpdateLongTap()
        {
            _longCommand = TapCommandEffect.GetLongTap(Element);
        }

        private void UpdateLongTapParameter()
        {
            _longParameter = TapCommandEffect.GetLongTapParameter(Element);
        }
    }
}